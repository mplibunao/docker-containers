name: postgres_cd

defaults:
  run:
    shell: bash

on:
  workflow_dispatch:
  schedule:
    - cron: '0 1 * * *'

jobs:
  scan:
    name: List Recent Updates
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.matrix-tags.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Scan Docker Repository
        uses: dhet/scan-docker-tags-action@v1.0.1
        with:
          image: library/postgres
          max-age-minutes: 1440
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
        id: scan

      - name: Print
        run: "echo 'Recent updates: ${{ steps.scan.outputs.tags }}'"

      - name: Convert to array
        uses: actions/github-script@v6
        id: matrix-tags
        env:
          TAGS: '${{ steps.scan.outputs.tags }}'
        with:
          result-encoding: string
          script: |
            const { TAGS } = process.env
            console.log("TAG", TAGS); // eslint-disable-line no-console
            const result = TAGS ? JSON.stringify(TAGS.split(',')) : '[]'
            console.log("result", result); // eslint-disable-line no-console
            return result

  cd:
    needs: [scan]
    name: Build and push image
    if: needs.scan.outputs.tags != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag: ${{ fromJSON(needs.scan.outputs.tags) }}
    steps:
      - name: debug
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set env
        run: |
          echo "TAG=${{ secrets.DOCKERHUB_USERNAME }}/postgres:${{ matrix.tag }}" >> $GITHUB_ENV

      - name: Setup buildx
        uses: docker/setup-buildx-action@v2
        id: buildx

      - name: Log into registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./postgres
          push: true
          tags: ${{ env.TAG }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/postgres:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/postgres:buildcache,mode=max
          build-args: |
            POSTGRES_VERSION=${{ matrix.tag }}
